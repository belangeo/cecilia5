<CeciliaInterface>
csampler snd -label audio
cgraph env -label Envelope -unit x -rel lin -min 0 -max 1 -col red -func 0 0 .0001 1 .99 1 1 0
cslider freq -label Frequency factor -min 0. -max 4. -init 1.02 -col orange
cpopup fft -label FFT Size -rate k -value  64 128 256 512 1024 2048 4096 8192 -init 1024 -gliss 0 -col marineblue
cpopup winsiz -label Window Size * -value 2 4 8 16 -init 2 -col marineblue
cpopup olaps -label Overlaps  -value 2 4 8 16 -init 2 -col marineblue
cslider bins -label # of Bins -rate k -res int -min 1 -max 1024 -init 200 -gliss 0 -col royalblue  -up 1
cslider binoffset -label Bin offset -rate k -res int -min 0 -max 50 -init 0 -gliss 0 -col royalblue  -up 1
cslider binincr -label Bin increment -rate k -res int -min 1 -max 50 -init 1 -gliss 0 -col royalblue  -up 1
cslider mix -label Dry/Wet -min 0 -max 100 -unit % -init 100 -col blue
ctoggle bal -label Restore Gain -init 1 -col red
</CeciliaInterface>

<5.1>

</5.1>

<Custom...>

</Custom...>

<Mono>
            instr 1 





aOri1       sampler     [snd]

ktrig       changed     gkwinsiz,gkolaps,gkbins,gkbinoffset,gkbinincr,gkfft;,gkform
if ktrig = 1 then
            reinit      pass
endif

pass:


ifftsize    pow         2, i(gkfft)+6
iolapsf     pow         2,i(gkolaps)+1
iwin        pow         2,i(gkwinsiz)+1
iwinsize    =           ifftsize*iwin
iolaps      =           ifftsize/iolapsf

if (iolaps >= ifftsize) then
iolaps      =           iolaps / 2
endif

if (iolaps < 16) then
iolaps      =           16
endif


iframe      =           ifftsize/2+1
ibinmax     =           (iframe-i(gkbinoffset))/i(gkbinincr)
isynth      =           (i(gkbins)<ibinmax?i(gkbins):ibinmax)

fsig1       pvsanal     aOri1, ifftsize, iolaps, iwinsize, 1

aProc1      pvsadsyn    fsig1, isynth, gkfreq, i(gkbinoffset), i(gkbinincr)

rireturn


aOri1       delay       aOri1, iwinsize/sr



if gkbal = 1 then

aProc1      balance     aProc1,aOri1

endif


kMix        port        gkmix*.01, 0.025
aGauche     =           ((aProc1*kMix)+(aOri1*(1-kMix))) * 0.5 * gkenv

            out         aGauche
            endin

</Mono>

<Octo>

</Octo>

<Quad>

</Quad>

<Stereo>
                instr 1 





aOri1,aOri2     sampler     [snd]

ktrig           changed     gkwinsiz,gkolaps,gkbins,gkbinoffset,gkbinincr,gkfft
if ktrig = 1 then
                reinit      pass
endif

pass:


ifftsize        pow         2, i(gkfft)+6
iolapsf         pow         2,i(gkolaps)+1
iwin            pow         2,i(gkwinsiz)+1
iwinsize        =           ifftsize*iwin
iolaps          =           ifftsize/iolapsf

if (iolaps >= ifftsize) then
iolaps          =           iolaps / 2
endif

if (iolaps < 16) then
iolaps          =           16
endif


iframe          =           ifftsize/2+1
ibinmax         =           (iframe-i(gkbinoffset))/i(gkbinincr)
isynth          =           (i(gkbins)<ibinmax?i(gkbins):ibinmax)

fsig1           pvsanal     aOri1, ifftsize, iolaps, iwinsize, 1
fsig2           pvsanal     aOri2, ifftsize, iolaps, iwinsize, 1

aProc1          pvsadsyn    fsig1, isynth, gkfreq, i(gkbinoffset), i(gkbinincr)
aProc2          pvsadsyn    fsig2, isynth, gkfreq, i(gkbinoffset), i(gkbinincr)

rireturn


aOri1           delay       aOri1, iwinsize/sr
aOri2           delay       aOri2, iwinsize/sr



if gkbal = 1 then

aProc1          balance     aProc1,aOri1
aProc2          balance     aProc2,aOri2

endif


kMix            port        gkmix*.01, 0.025
aGauche         =           ((aProc1*kMix)+(aOri1*(1-kMix))) * 0.5 * gkenv
aDroite         =           ((aProc2*kMix)+(aOri2*(1-kMix))) * 0.5 * gkenv

                outs        aGauche, aDroite
                endin

</Stereo>


<CsoundScore>
;#   p1   p2   p3              
i    1    0    [total_time]    
</CsoundScore>


<PythonScore>

</PythonScore>


<CeciliaOpen>
scoreType=Csound

</CeciliaOpen>

<CeciliaData>
</CeciliaData>
