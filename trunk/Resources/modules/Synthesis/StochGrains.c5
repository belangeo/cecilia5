GRAIN_SAWTOOTH_WAVEFORM = SawTable(20)
GRAIN_SQUARE_WAVEFORM = SquareTable(30)
GRAIN_SINC_WAVEFORM = SincTable(freq=3.14159*16, windowed=True)
GRAIN_PULSAR_WAVEFORM = SincTable(freq=3.14159*4, windowed=True)
GRAIN_ENVELOPE_WAVEFORM = HannTable()
GRAIN_SINE_WAVEFORM = HarmTable([1,0,0,.1,0,.3,0,0,.2,0,0,.1,0,0,.15,0,.1,0,0,.2,0,.1,0,0,.1,0,0,.07,0,.05])

class Grain:
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv):
        self.trig = Select(count, order)
        self.freq = SampHold(freq, self.trig, 1.0)
        self.dur = TrigXnoise(self.trig, mul=dur[1]-dur[0], add=dur[0])
        self.det = TrigRand(self.trig, det[0], det[1])
        self.bri = TrigRand(self.trig, bri[0], bri[1])
        self.pan = TrigRand(self.trig, pan[0], pan[1])
        self.mul = TrigRand(self.trig, mul[0], mul[1], mul=.1)
        self.amp = TrigEnv(self.trig, env, self.dur, mul=self.mul)

    def stop(self):
        for obj in self.__dict__.values():
            obj.stop()
        return self

    def play(self):
        for obj in self.__dict__.values():
            obj.play()
        return self

class GrainFM(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.ind = TrigEnv(self.trig, brienv, self.dur, mul=self.bri*20)
        self.s1 = FM(carrier=self.freq, ratio=self.det*.4+1, index=self.ind, mul=self.amp)
        self.out = SPan(self.s1, outs=nchnls, pan=self.pan)

class GrainSL(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.feed = TrigEnv(self.trig, brienv, self.dur, mul=self.bri*.3)
        self.s1 = SineLoop(self.freq, feedback=self.feed, mul=self.amp)
        self.detune = self.det * .3 + 1
        self.s2 = SineLoop(self.freq*self.detune, feedback=self.feed, mul=self.amp)
        self.out = SPan(self.s1+self.s2, outs=nchnls, pan=self.pan)

class GrainBlit(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.cutoff = TrigEnv(self.trig, brienv, self.dur, mul=self.bri*10000, add=100)
        self.s1 = Osc(GRAIN_SINC_WAVEFORM, self.freq, mul=self.amp)
        self.detune = self.det * .3 + 1
        self.s2 = Osc(GRAIN_SINC_WAVEFORM, self.freq*self.detune, mul=self.amp)
        self.filt = Tone(self.s1+self.s2, self.cutoff, mul=4)
        self.out = SPan(self.filt, outs=nchnls, pan=self.pan)

class GrainCrossFM(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.ind = TrigEnv(self.trig, brienv, self.dur, mul=self.bri*4)
        self.s1 = CrossFM(carrier=self.freq, ratio=self.det*.4+1, ind1=4, ind2=self.ind, mul=self.amp)
        self.out = SPan(self.s1, outs=nchnls, pan=self.pan)

class GrainSaw(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.cutoff = TrigEnv(self.trig, brienv, self.dur, mul=self.bri*10000, add=100)
        self.s1 = Osc(GRAIN_SAWTOOTH_WAVEFORM, self.freq, mul=self.amp)
        self.detune = self.det * .3 + 1
        self.s2 = Osc(GRAIN_SAWTOOTH_WAVEFORM, self.freq*self.detune, mul=self.amp)
        self.filt = Tone(self.s1+self.s2, self.cutoff, mul=.7)
        self.out = SPan(self.filt, outs=nchnls, pan=self.pan)

class GrainSquare(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.cutoff = TrigEnv(self.trig, brienv, self.dur, mul=self.bri*10000, add=100)
        self.s1 = Osc(GRAIN_SQUARE_WAVEFORM, self.freq, mul=self.amp)
        self.detune = self.det * .3 + 1
        self.s2 = Osc(GRAIN_SQUARE_WAVEFORM, self.freq*self.detune, mul=self.amp)
        self.filt = Tone(self.s1+self.s2, self.cutoff, mul=.7)
        self.out = SPan(self.filt, outs=nchnls, pan=self.pan)

class GrainPulsar(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.frac = TrigEnv(self.trig, brienv, self.dur, mul=self.bri)
        self.scl_frac = Scale(self.frac, 0, 1, 1, 0.05)
        self.s1 = Pulsar(GRAIN_PULSAR_WAVEFORM, env=GRAIN_ENVELOPE_WAVEFORM, freq=self.freq, frac=self.scl_frac, mul=self.amp)
        self.detune = self.det * .3 + 1
        self.s2 = Pulsar(GRAIN_PULSAR_WAVEFORM, env=GRAIN_ENVELOPE_WAVEFORM, freq=self.freq*self.detune, frac=self.scl_frac, mul=self.amp)
        self.out = SPan(self.s1+self.s2, outs=nchnls, pan=self.pan)

class GrainAddSynth(Grain):
    def __init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv, nchnls):
        Grain.__init__(self, order, count, freq, det, bri, dur, pan, mul, env, brienv)
        self.cutoff = TrigEnv(self.trig, brienv, self.dur, mul=self.bri*10000, add=100)
        self.s1 = OscBank(GRAIN_SINE_WAVEFORM, freq=self.freq, spread=self.det*.25, slope=1, num=8, fjit=True, mul=self.amp)
        self.s2 = Tone(self.s1, self.cutoff, mul=4)
        self.out = SPan(self.s2, outs=nchnls, pan=self.pan)

class Module(BaseModule):
    def __init__(self):
        BaseModule.__init__(self)
        self.setGlobalSeed(int(self.seed.get()))
        self.num = int(self.numofvoices_value)
        self.current_synth = self.synth_value
        self.scaledict =    {'Major':[0,4,7], 'Minor':[0,3,7], 'Seventh':[0,4,7,10], 'Minor 7':[0,3,7,10], 'Major 7':[0,4,7,11], 
                            'Minor 7 b5':[0,3,6,10], 'Diminished':[0,3,6], 'Diminished 7':[0,3,6,9], 'Minor 9':[0,3,7,10,14], 
                            'Major 9':[0,4,7,11,14], 'Ninth':[0,4,7,10,14], 'Minor 11':[0,3,7,10,14,17], 'Major 11':[0,4,7,11,14,18], 
                            'Eleventh':[0,4,7,10,14,18], 'Major 13':[0,4,7,11,14,18,21], 'Thirteenth':[0,4,7,10,14,18,21], 
                            'Serial':[0,1,2,3,4,5,6,7,8,9,10,11], 'Whole-tone': [0,2,4,6,8,10]}
        self.stack_dict = {"FM": GrainFM, "Looped Sine": GrainSL, "Impulse train": GrainBlit, "AddSynth": GrainAddSynth,
                           "CrossFM": GrainCrossFM, "Sawtooth": GrainSaw, "Square": GrainSquare, "Pulsar": GrainPulsar}

        self.speedgen = XnoiseDur(min=self.speed_rng[0], max=self.speed_rng[1])
        self.new = Change(self.speedgen)
        self.newpass = Percent(self.new, self.density)
        self.count = VoiceManager(self.newpass)

        self.pitfloat = TrigXnoise(self.newpass, mul=self.pitch[1]-self.pitch[0], add=self.pitch_off+self.pitch[0])
        self.freq = MToF(self.pitfloat)
        self.pitint = TrigXnoiseMidi(self.newpass, mul=0.007874015748031496)
        self.pitch_range = self.pitch[1]-self.pitch[0]
        self.scl = Snap(self.pitint*self.pitch_range+self.pitch[0]+self.pitch_off, choice=self.scaledict["Serial"], scale=1)
        self.frtostack = Sig(self.freq)

        self.mul_rng = DBToA(self.dbamp_rng)

        for key in self.stack_dict.keys():
            stack = [self.stack_dict[key](i, self.count, self.frtostack, self.detune_rng, self.bright_rng, self.dur_rng, 
                    self.pan_rng, self.mul_rng, self.grainenv, self.brightenv, self.nchnls).stop() for i in range(self.num)]
            stack_mix = Mix([gr.out for gr in stack], voices=self.nchnls).stop()
            self.stack_dict[key] = [stack, stack_mix]

        self.count.setTriggers([obj.amp["trig"] for obj in self.stack_dict[self.current_synth][0]])

        [obj.play() for obj in self.stack_dict[self.current_synth][0]]
        self.stack_dict[self.current_synth][1].play()
        self.out = Sig(self.stack_dict[self.current_synth][1])

        self.speedalgo(self.speedalgo_index, self.speedalgo_value)
        self.duralgo(self.duralgo_index, self.duralgo_value)
        self.pitalgo(self.pitalgo_index, self.pitalgo_value)
        self.genmethod(self.genmethod_index, self.genmethod_value)

    def synth(self, index, value):
        [obj.stop() for obj in self.stack_dict[self.current_synth][0]]
        [obj.play() for obj in self.stack_dict[value][0]]
        self.stack_dict[value][1].play()
        self.out.value = self.stack_dict[value][1]
        self.current_synth = value
        self.count.setTriggers([obj.amp["trig"] for obj in self.stack_dict[self.current_synth][0]])

    def assignX1X2(self, index, *args):
        for arg in args:
            arg.dist = index
            if index in [4,5,6]:
                arg.x1 = 8
            elif index == 7:
                arg.x1 = 2
            elif index == 8:
                arg.x1 = 0.5
                arg.x2 = 3.2
            elif index == 9:
                arg.x1 = 0.5
                arg.x2 = 1
            elif index == 10:
                arg.x1 = 3
                arg.x2 = 2
            elif index in [11,12]:
                arg.x1 = 1
                arg.x2 = .25

    def speedalgo(self, index, value):
        self.assignX1X2(index, self.speedgen)

    def pitalgo(self, index, value):
        self.assignX1X2(index, self.pitfloat, self.pitint)

    def duralgo(self, index, value):
        for key in self.stack_dict.keys():
            self.assignX1X2(index, *[obj.dur for obj in self.stack_dict[key][0]])

    def genmethod(self, index, value):
        if value == "All-over":
            self.pitfloat.play()
            self.freq.play()
            self.frtostack.value = self.freq
            self.pitint.stop()
            self.scl.stop()
        else:
            self.scl.choice = self.scaledict[value]
            self.pitint.play()
            self.scl.play()
            self.frtostack.value = self.scl
            self.pitfloat.stop()
            self.freq.stop()

    def seed_up(self, value):
        self.setGlobalSeed(int(value))

Interface = [   cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cgraph(name="grainenv", label="Grain Envelope", func=[(0,0),(.01,1),(.2,.4),(.5,.3),(1,0)], table=True, col="orange"),
                cgraph(name="brightenv", label="Brightness Envelope", func=[(0,1),(.2,.2),(1,0)], table=True, col="chorusyellow"),
                cslider(name="pitch_off", label="Pitch Offset", min=-12, max=12, init=0, rel="lin", res="int", unit="midi", col="red"),
                crange(name="pitch", label="Pitch Range", min=12, max=115, init=[48,84], rel="lin", unit="midi", col="filterred"),
                crange(name="speed_rng", label="Speed Range", min=.005, max=5, init=[.05, .25], rel="log", unit="sec", col="green"),
                crange(name="dur_rng", label="Duration Range", min=.005, max=20, init=[.5,5], rel="log", unit="sec", col="forestgreen"),
                crange(name="bright_rng", label="Brightness Range", min=0, max=1, init=[0,.1], rel="lin", unit="x", col="marineblue"),
                crange(name="detune_rng", label="Detune Range", min=0.0001, max=1, init=[0.0001, 0.0005], rel="log", unit="x", col="royalblue"),
                crange(name="dbamp_rng", label="Intensity Range", min=-90, max=0, init=[-18,-6], rel="lin", unit="dB", col="chorusyellow"),
                crange(name="pan_rng", label="Pan Range", min=0, max=1, init=[0,1], rel="lin", unit="x", col="khaki"),
                cslider(name="density", label="Density", min=0, max=100, init=100, rel="lin", unit="%", col="orange"),
                cslider(name="seed", label="Global seed", min=0, max=5000, init=0, rel="lin", res="int", unit="x", up=True),
                cpopup(name="synth", label="Synth Type", value=['FM', 'Looped Sine', 'Impulse train', 'CrossFM', 'Sawtooth', 
                        'Square', 'Pulsar', 'AddSynth'], init="FM", col="compblue"),
                cpopup(name="genmethod", label="Pitch Scaling", value=['All-over', 'Serial', 'Major', 'Minor', 'Seventh', 'Minor 7', 
                        'Major 7', 'Minor 7 b5', 'Diminished', 'Diminished 7', 'Ninth', 'Major 9', 'Minor 9', 'Eleventh', 'Major 11', 
                        'Minor 11', 'Thirteenth', 'Major 13', 'Whole-tone'], init="Major 11", col="red"),
                cpopup(name="pitalgo", label="Pitch Algorithm", value=['Uniform', 'Linear min', 'Linear max', 'Triangular', 
                        'Expon min', 'Expon max', 'Bi-exponential', 'Cauchy', 'Weibull', 'Gaussian', 'Poisson', 'Walker', 'Loopseg'], 
                        init="Uniform", col="filterred"),
                cpopup(name="speedalgo", label="Speed Algorithm", value=['Uniform', 'Linear min', 'Linear max', 'Triangular', 
                        'Expon min', 'Expon max', 'Bi-exponential', 'Cauchy', 'Weibull', 'Gaussian', 'Poisson', 'Walker', 'Loopseg'], 
                        init="Uniform", col="green"),
                cpopup(name="duralgo", label="Duration Algorithm", value=['Uniform', 'Linear min', 'Linear max', 'Triangular', 
                        'Expon min', 'Expon max', 'Bi-exponential', 'Cauchy', 'Weibull', 'Gaussian', 'Poisson', 'Walker', 'Loopseg'], 
                        init="Uniform", col="forestgreen"),
                cpopup(name="numofvoices", label="Max Num of Grains", value=['5','10','15','20','25','30','40','50','60'], init='10', rate="i")
            ]
