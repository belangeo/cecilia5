import random
class Module(BaseModule):
    """
    Pulsar synthesis module
    
    Sliders under the graph:
    
        - Base Frequency : Base pitch of the synthesis
        - Pulsar Width : Amount of silence added to one period
        - Detune Factor : Amount of jitter applied to the pitch
        - Detune Speed : Speed of the jitter applied to the pitch
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - Wave Shape : Shape used for the synthesis
        - Custom Wave : Define a custom wave shape by entering amplitude values
        - Window Type : Pulsar envelope
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.src = self.addFilein("src")
        self.window_size = self.wsize_value
        index = int(self.srcindex.get() * self.src.getSize(False))
        samples = [self.src[i].getTable()[index:index+int(self.window_size)] for i in range(self.nchnls)]
        self.t = DataTable(size=len(samples[0]), chnls=len(samples), init=samples)
        self.e = WinTable(type=self.wtype_index, size=8192)
        self.rnd1 = Randi(min=1-self.detune, max=1+self.detune, freq=self.detunesp)
        self.rnd2 = Randi(min=1-self.detune, max=1+self.detune, freq=self.detunesp)
        self.polyfreqs = self.polyphony_spread
        self.ply1 = [self.bfreq*i*self.rnd1 for i in self.polyfreqs]
        self.ply2 = [self.bfreq*i*self.rnd2 for i in self.polyfreqs]
        self.ply3 = [self.bfreq*i for i in self.polyfreqs for j in range(self.nchnls)]
        self.pfreqs = self.ply3+self.ply1+self.ply2
        self.pul = Pulsar(self.t, self.e, freq=self.pfreqs, frac=self.width, phase=0, interp=2, mul=0.3*self.polyphony_scaling*self.env)
        self.out = Mix(self.pul, voices=self.nchnls)

    def wtype(self, index, value):
        self.e.type = index

    def wsize(self, index, value):
        self.window_size = value
        index = int(self.srcindex.get() * self.src.getSize(False))
        samples = [self.src[i].getTable()[index:index+int(value)] for i in range(self.nchnls)]
        self.t = DataTable(size=len(samples[0]), chnls=len(samples), init=samples)
        self.out.table = self.t
    
    def srcindex_up(self, value):
        index = int(value * self.src.getSize(False))
        samples = [self.src[i].getTable()[index:index+int(self.window_size)] for i in range(self.nchnls)]
        self.t = DataTable(size=len(samples[0]), chnls=len(samples), init=samples)
        self.out.table = self.t
        
Interface = [   cfilein(name="src", label="Sound Source"),
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="bfreq", label="Base Frequency", min=0.1, max=1000, init=20, rel="log", unit="Hz", col="blue"),
                cslider(name="width", label="Pulsar Width", min=0.0001, max=1, init=0.18, rel="lin", unit="x", col="lightgreen"),
                cslider(name="detune", label="Detune Factor", min=0.0001, max=0.999, init=0.005, rel="log", unit="x", col="red"),
                cslider(name="detunesp", label="Detune Speed", min=0.0001, max=100, init=0.3, rel="log", unit="Hz", col="red"),
                cslider(name="srcindex", label="Source Index", min=0., max=1., init=0.5, rel="lin", unit="x", up=True, col="red"),
                cpopup(name="wsize", label="Window Size", init="512", col="green1", value=["32", "64", "128", "256", "512", "1024", "2048", "4096", "8192", "16384","32768"]),
                cpopup(name="wtype", label="Window Type", init="Tuckey", col="chorusyellow", value=["Rectangular", "Hamming", "Hanning", 
                            "Bartlett", "Blackman 3", "Blackman 4", "Blackman 7", "Tuckey", "Sine"]),
                cpoly()
          ]

