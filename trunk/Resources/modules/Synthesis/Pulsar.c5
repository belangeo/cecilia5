import random
class Module(BaseModule):
    """
    Pulsar synthesis module
    
    Sliders under the graph:
    
        - Base Frequency : Base pitch of the synthesis
        - Pulsar Width : Amount of silence added to one period
        - Detune Factor : Amount of jitter applied to the pitch
        - Detune Speed : Speed of the jitter applied to the pitch
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - Wave Shape : Shape used for the synthesis
        - Custom Wave : Define a custom wave shape by entering amplitude values
        - Window Type : Pulsar envelope
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.t = HarmTable(size=8192)
        self.e = WinTable(type=self.wtype_index, size=8192)
        self.customtable = self.custom_value
        self.rnd1 = Randi(min=1-self.detune, max=1+self.detune, freq=self.detunesp)
        self.rnd2 = Randi(min=1-self.detune, max=1+self.detune, freq=self.detunesp)
        self.polyfreqs = [random.uniform(1.0-self.polyphony_spread, 1.0+self.polyphony_spread) for i in range(self.number_of_voices)]
        self.ply1 = [self.bfreq*i*self.rnd1 for i in self.polyfreqs]
        self.ply2 = [self.bfreq*i*self.rnd2 for i in self.polyfreqs]
        self.ply3 = [self.bfreq*i for i in self.polyfreqs]
        self.pfreqs = self.ply3+self.ply1+self.ply2+self.ply3
        self.out = Pulsar(self.t, self.e, freq=self.pfreqs, frac=self.width, phase=0, interp=2, mul=0.3*self.env)
                            
        #INIT
        self.wavedict = {'Sine':[1], 'Sawtooth':[1, 0.5, 0.333, 0.25, 0.2, 0.167, 0.143, 0.111, 0.1], 'Square':[1, 0, 0.333, 0, 0.2, 0, 0.143, 0, 0.111],
                            'Complex1':[1, 0, 0, 0, 0.3, 0, 0, 0, 0.2, 0, 0, 0.05], 'Complex2':[1, 0, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 0, 0.1, 0, 0, 0.05, 0, 0, 0.02],
                            'Complex3':[1, 0, 0, 0.2, 0, 0.1, 0, 0, 0, 0.3, 0, 0.1, 0, 0, 0.05, 0, 0, 0.1, 0, 0.05, 0, 0, 0, 0.05, 0, 0, 0.02],
                            'Custom':self.customtable}
                            
        self.shape(self.shape_index, self.shape_value)
    
    def shape(self, index, value):
        self.t.replace(self.wavedict[value])
    
    def wtype(self, index, value):
        self.e.type = index
                    
    def custom(self, value):
        self.customtable = value

Interface = [   cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="bfreq", label="Base Frequency", min=10, max=1000, init=34, rel="log", unit="Hz", col="blue"),
                cslider(name="width", label="Pulsar Width", min=0.0001, max=1, init=0.18, rel="lin", unit="x", col="lightgreen"),
                cslider(name="detune", label="Detune Factor", min=0.0001, max=0.999, init=0.1, rel="log", unit="x", col="red"),
                cslider(name="detunesp", label="Detune Speed", min=0.0001, max=100, init=0.03, rel="log", unit="Hz", col="red"),
                cpopup(name="shape", label="Wave Shape", init="Square", col="chorusyellow", value=["Sine","Sawtooth","Square","Complex1", 
                            "Complex2", "Complex3", "Custom"]),
                cgen(name="custom", label="Custom Wave", init=[1,0,0.5,0.3,0,0,0.2,0,0.1,0,0.09,0,0.05], popup=("shape", 6), col="forestgreen"),
                cpopup(name="wtype", label="Window Type", init="Tuckey", col="chorusyellow", value=["Rectangular", "Hamming", "Hanning", 
                            "Bartlett", "Blackman 3", "Blackman 4", "Blackman 7", "Tuckey", "Sine"]),
                cpoly()
          ]

