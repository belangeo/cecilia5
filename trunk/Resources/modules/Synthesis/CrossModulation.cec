<CeciliaInterface>
;cmodule dump -label Two oscillators, mutually frequency and/or phase modulated by each other.
cgraph env -label Envelope -unit x -rel lin -min 0 -max 1 -col red -func 0 0 .001 1 .999 1 1 0

cslider freq -label Base freq -min 10 -max 1000 -init 100 -rel log -unit Hz -col olivegreen
cslider f1 -label Osc 1 Freq Mul -min 0.0001 -max 10 -rel log -init 2.99 -col orange
cslider x1 -label Osc 1 Index -min 0.0001 -max 100 -rel log -init 2 -col orange
cslider f2 -label Osc 2 Freq Mul -min 0.0001 -max 10 -rel log -init 0.5 -col marineblue
cslider x2 -label Osc2 Index -min 0.0001 -max 100 -rel log -init 1 -col marineblue
cpopup modtype -label Modulation type -init Frequency -value Frequency Phase Freq/Phase -col olivegreen
cpopup osc1wave -label Osc 1 Waveform -init Sine -value Sine Square Sawtooth Complex_1 Complex_2 Complex_3 -col orange
cpopup osc2wave -label Osc 2 Waveform -init Square -value Sine Square Sawtooth Complex_1 Complex_2 Complex_3  -col marineblue
cpoly poly -label voices -min 1 -max 10 -init 1
</CeciliaInterface>

<5.1>

</5.1>

<Custom...>

</Custom...>

<Mono>

git         ftgen           1, 0, 16384, 10, 1
git         ftgen           2, 0, 16384, 10, 1
git         ftgen           20, 0 ,16384, 10, 1
git         ftgen           21, 0 ,16384, 10, 1, 0, .33, 0, .2, 0, .143, 0, .111
git         ftgen           22, 0 ,16384, 10, 1, .5, .33, .25, .2, .1667, .143, .125, .111
git         ftgen           23, 0 ,16384, 10, 1, 0, 0, .25, 0, 0, .13, 0, .08, 0, 0, 0, .04
git         ftgen           24, 0 ,16384, 10, 1, 0, .2, .25, 0, 0, .13, 0, .08, 0, .1, 0, .04, 0, 0, .02
git         ftgen           25, 0 ,16384, 10, 1, 0, 0, .2, .25, 0, .15, .13, 0, .08, 0, .1, 0, .04, .03, 0, .02, 0, 0, .01

gaLeft      init            0
gaRight     init            0

            instr 1
ktrig       changed         gkosc1wave
if ktrig == 1 then
            tablecopy       1, gkosc1wave+20
endif

ktrig2      changed         gkosc2wave
if ktrig2 == 1 then
            tablecopy       2, gkosc2wave+20
endif

if gkmodtype == 0 then
a1, a2 crossfmi gkf1, gkf2, gkx1, gkx2, gkfreq*p4, 1, 2
elseif gkmodtype == 1 then
a1, a2 crosspmi gkf1, gkf2, gkx1, gkx2, gkfreq*p4, 1, 2
elseif gkmodtype == 2 then
a1, a2 crossfmpmi gkf1, gkf2, gkx1, gkx2, gkfreq*p4, 1, 2
endif

gaLeft      =               (a1*5000/(ampdb(p5)/10) )+ gaLeft
gaRight     =               (a2*5000/(ampdb(p5)/10) )+ gaRight

            endin

            instr 2


ktrig       changed     gkpolynum,gkpolyspread
if ktrig = 1 then
            turnoff2    1,0,.5
            reinit      pass
endif
pass:

inum        =           0
generate:
ip4         random      1-i(gkpolyspread), 1+i(gkpolyspread)
            event_i     "i", 1, 0, p3, ip4, i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum        =           inum + 1
goto generate
endif
            endin

            instr 3

kamp        gainslider      128-gkpolynum

            out            gaLeft * kamp * .1 * gkenv
gaLeft      =               0
gaRight     =               0

            endin
</Mono>

<Octo>

</Octo>

<Quad>

</Quad>

<Stereo>
git         ftgen           1, 0, 16384, 10, 1
git         ftgen           2, 0, 16384, 10, 1
git         ftgen           20, 0 ,16384, 10, 1
git         ftgen           21, 0 ,16384, 10, 1, 0, .33, 0, .2, 0, .143, 0, .111
git         ftgen           22, 0 ,16384, 10, 1, .5, .33, .25, .2, .1667, .143, .125, .111
git         ftgen           23, 0 ,16384, 10, 1, 0, 0, .25, 0, 0, .13, 0, .08, 0, 0, 0, .04
git         ftgen           24, 0 ,16384, 10, 1, 0, .2, .25, 0, 0, .13, 0, .08, 0, .1, 0, .04, 0, 0, .02
git         ftgen           25, 0 ,16384, 10, 1, 0, 0, .2, .25, 0, .15, .13, 0, .08, 0, .1, 0, .04, .03, 0, .02, 0, 0, .01

gaLeft      init            0
gaRight     init            0

            instr 1
ktrig       changed         gkosc1wave
if ktrig == 1 then
            tablecopy       1, gkosc1wave+20
endif

ktrig2      changed         gkosc2wave
if ktrig2 == 1 then
            tablecopy       2, gkosc2wave+20
endif

if gkmodtype == 0 then
a1, a2 crossfmi gkf1, gkf2, gkx1, gkx2, gkfreq*p4, 1, 2
elseif gkmodtype == 1 then
a1, a2 crosspmi gkf1, gkf2, gkx1, gkx2, gkfreq*p4, 1, 2
elseif gkmodtype == 2 then
a1, a2 crossfmpmi gkf1, gkf2, gkx1, gkx2, gkfreq*p4, 1, 2
endif

gaLeft      =               (a1*1000/(ampdb(p5)/10)) + gaLeft
gaRight     =               (a1*1000/(ampdb(p5)/10)) + gaRight

            endin


            instr 2


ktrig       changed     gkpolynum,gkpolyspread
if ktrig = 1 then
            turnoff2    1,0,.5
            reinit      pass
endif
pass:

inum        =           0
generate:
ip4         random      1-i(gkpolyspread), 1+i(gkpolyspread)
            event_i     "i", 1, 0, p3, ip4,i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum        =           inum + 1
goto generate
endif
            endin



            instr 3

kamp        gainslider      128-gkpolynum
            outs            gaLeft*kamp*gkenv, gaRight*kamp*gkenv
gaLeft      =               0
gaRight     =               0

            endin
</Stereo>


<CsoundScore>
i2 0 [total_time]
i3 0 [total_time]
</CsoundScore>


<PythonScore>

</PythonScore>


<CeciliaOpen>
scoreType=Csound

</CeciliaOpen>

<CeciliaData>
</CeciliaData>
