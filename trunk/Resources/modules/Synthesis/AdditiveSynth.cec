<CeciliaInterface>
cgraph env -label Envelope -unit x -rel lin -min 0 -max 1 -col red -func 0 0 .001 1 .999 1 1 0
cslider fund -label Base frequency -min 10. -max 1000. -init 100. -gliss 0 -rel log -col green
cslider pspread -label Partiels spread -min 0.0001 -max 4. -init .001 -rel log -col green
cslider randa -label Partiels Rand Amp -min .0001 -max 1. -init 0.001 -rel log -col orange
cslider randf -label Partiels Rand Speed -unit Hz -min .01 -max 100. -init 10. -rel log  -col orange
cslider part -label # of  Partials -rate i -res int -min 1 -max 32 -init 20 -gliss 0 -col blue
cpopup flat -label Amplitude Factor -value scale flat -init flat -col marineblue
cpopup wave -label Wave Shape -value sine sawtooth square complex1 complex2 complex3 custom -init square  -col khaki
cpoly poly -label voices -min 1 -max 10 -init 1
cgen custom -label Custom wave -gen 10 -size 8192 -init 1,0,0,.3,0,0,.2,0,.1,0,0,0,.05 -col red
</CeciliaInterface>

<5.1>

</5.1>

<Custom...>

</Custom...>

<Mono>

opcode addsynner, a, kkkip
kfreq, kspread, ktab, ipts, inum xin




if (inum >= ipts) goto initdone
    a1 addsynner kfreq, kspread, ktab, ipts, inum+1

initdone:
kfac        pow         inum+1, kspread
kfr         =           kfreq * kfac
if (gkflat == 1) then
kamp        =           1 / (ipts/2)
else
kamp        =           1 / (inum + 1)
endif

krandf      randomi     gkrandf*.9, gkrandf*1.1, 1
krand       randomi     1-gkranda, 1+gkranda, krandf

if ktab == 6 then
ktab = gicustom
else
ktab = ktab + 1
endif

asig        oscilikt    kamp, kfr*krand, ktab

aout        =           asig + a1
            xout        aout
endop

            instr 1

aProc1 addsynner p4*gkfund, gkpspread, gkwave, gipart

aGauche     =           aProc1 * 500 * gkenv

            out         aGauche/(ampdb(p5)/10)
            endin

 

            instr 2


ktrig       changed     gkpolynum,gkpolyspread
if ktrig = 1 then
            turnoff2    1,0,.5
            reinit      pass
endif
pass:

inum        =           0
generate:
ip4         random      1-i(gkpolyspread), 1+i(gkpolyspread)
            event_i     "i", 1, 0, p3, ip4, i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum        =           inum + 1
goto generate
endif
            endin

</Mono>

<Octo>

</Octo>

<Quad>

</Quad>

<Stereo>
opcode addsynner, a, kkkip
kfreq, kspread, ktab, ipts, inum xin

if (inum >= ipts) goto initdone
    a1 addsynner kfreq, kspread, ktab, ipts, inum+1

initdone:
kfac        pow         inum+1, kspread
kfr         =           kfreq * kfac
if (gkflat == 1) then
        kamp        =           1 / (ipts/2)
    else
        kamp        =           1 / (inum + 1)
endif

krandf      randomi     gkrandf*.9, gkrandf*1.1, 1
krand       randomi     1-gkranda, 1+gkranda, krandf

if ktab == 6 then
ktab = gicustom
else
ktab = ktab + 1
endif

asig        oscilikt    kamp, kfr*krand, ktab

aout        =           asig + a1
            xout        aout
endop




            instr 1

aProc1 addsynner p4*gkfund, gkpspread, gkwave, gipart
aProc2 addsynner p4*gkfund*1.002, gkpspread, gkwave, gipart

aGauche     =           aProc1 * 500 * gkenv 
aDroite     =           aProc2 * 500 * gkenv

            outs        aGauche/(ampdb(p5)/10), aDroite /(ampdb(p5)/10)
            endin


            instr 2


ktrig       changed     gkpolynum,gkpolyspread
if ktrig = 1 then
            turnoff2    1,0,.5
            reinit      pass
endif
pass:

inum        =           0
generate:
ip4         random      1-i(gkpolyspread), 1+i(gkpolyspread)
            event_i     "i", 1, 0, p3, ip4, i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum        =           inum + 1
goto generate
endif
            endin

</Stereo>


<CsoundScore>
;#   p1   p2   p3              p4    p5   p6    p7      p8     p9    p10     p11      p12     p13     p14   p15  p16    p17  p18  p19    p20  p21  p22    p23  p24    p25  p26  p27  p28    p29  p30  p31    
f    1    0    8192            10    1    
f    2    0    8192            10    1    .5    .333    .25    .2    .167    .143    .111    .1      
f    3    0    8192            10    1    0     .333    0      .2    0       .143     0       .111    
f    4    0    8192            10    1    0     0       0      .3    0       0        0       .2      0     0    .05    
f    5    0    8192            10    1    0     0       .3     0     0       .2       0       0       0     0    .1     0    0    .05    0    0    .02    
f    6    0    8192            10    1    0     0       .2     0     .1      0        0       0       .3    0    .1     0    0    .05    0    0    .1     0    .05    0    0    0    .05    0    0    .02    

i    2    0    [total_time]    

</CsoundScore>


<PythonScore>
import random
addLine("f1 0 8192 10 1")
addLine("f2 0 8192 10 1 .5 .333 .25 .2 .167 .143 .111 .1")
addLine("f3 0 8192 10 1 0 .333 0 .2 0 .143 0 .111")
addLine("f4 0 8192 10 1 0 0 0 .3 0 0 0 .2 0 0 .05")
addLine("f5 0 8192 10 1 0 0 .3 0 0 .2 0 0 0 0 .1 0 0 .05 0 0 .02")
addLine("f6 0 8192 10 1 0 0 .2 0 .1 0 0 0 .3 0 .1 0 0 .05 0 0 .1 0 .05 0 0 0 .05 0 0 .02")

num = getUserValue("polynum")
rnd = getUserValue("polyspread")
for i in range(num+1):
    forInst(1)
    p2 = 0
    p3 = '[total_time]'
    p4 = random.uniform(1.0-rnd, 1.0+rnd)

#d = loopseg(mini=48, maxi=102)
#forInst(1)
#p2 = [i*.2 for i in range(300)]
#p3 = .2
#p4 = [midiToTranspo(d.next()) for i in range(300)]

</PythonScore>


<CeciliaOpen>
scoreType=Csound

</CeciliaOpen>

<CeciliaData>

</CeciliaData>
