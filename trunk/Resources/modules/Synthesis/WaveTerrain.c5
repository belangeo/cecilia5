import random
class Module(BaseModule):
    """
    Waveterrain synthesis module
    
    Sliders under the graph:
    
        - X Frequency : Frequency of the X LFO inside the matrix
        - Y Frequency : Frequency of the Y LFO inside the matrix
        - X & Y Sharpness : Amount of harmonics of the LFOs
        - Terrain Frequency : Frequency of the terrain drawn in the matrix
        - Terrain Deviation : Phase of the terrain drawn in the matrix
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - X Wave Type : Shape of the X LFO
        - Y Wave Type : Shape of the Y LFO
        - Terrain Size : Size of the matrix used
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        
        self.sizer = int(self.tsize_value)
        self.tfreq = self.genfreq.get()
        self.tphase = self.genphase.get()
        self.polyfreqs = [random.uniform(1.0-self.polyphony_spread, 1.0+self.polyphony_spread) for i in range(self.number_of_voices*2)]

        self.nm = NewMatrix(self.sizer, self.sizer)
        self.generate()
        self.xrnd = Randi(0.15, 0.35, 0.05)
        self.yrnd = Randi(0.15, 0.35, 0.065)
        self.x = LFO(freq=self.xfreq*self.polyfreqs, sharp=self.sharp, type=self.wavetypeX_index, mul=self.xrnd, add=0.5)
        self.y = LFO(freq=self.yfreq, sharp=self.sharp, type=self.wavetypeY_index, mul=self.yrnd, add=0.5)
        self.fade = SigTo(value=1, time=.025, init=1, mul=.25)
        self.out = MatrixPointer(self.nm, Clip(self.x, -0.999, 0.999), Clip(self.y, -0.999, 0.999), mul=self.fade*self.env)

    def generate(self):
        self.nm.genSineTerrain(freq=self.tfreq, phase=self.tphase)
        self.nm.normalize()

    def genfreq_up(self, value):
        self.fade.value = 0
        time.sleep(.025)
        self.tfreq = value
        self.generate()
        time.sleep(.025)
        self.fade.value = 1

    def genphase_up(self, value):
        self.fade.value = 0
        time.sleep(.025)
        self.tphase = value
        self.generate()
        time.sleep(.025)
        self.fade.value = 1

    def wavetypeX(self, index, value):
        self.x.type = index

    def wavetypeY(self, index, value):
        self.y.type = index

Interface = [   cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="xfreq", label="X Frequency", min=.01, max=1000, init=99.5, rel="log", unit="Hertz", col="blue"),
                cslider(name="yfreq", label="Y Frequency", min=.01, max=1000, init=12.5, rel="log", unit="Hertz", col="green"),
                cslider(name="sharp", label="X & Y Sharpness", min=0, max=1, init=0.5, rel="lin", unit="Hertz", col="red"),
                cslider(name="genfreq", label="Terrain Frequency", min=.01, max=100, init=1, rel="log", up=True, unit="Hertz"),
                cslider(name="genphase", label="Terrain Deviation", min=.001, max=0.999, init=0.0625, rel="log", up=True, unit="Hertz"),
                cpopup(name="wavetypeX", label="X Wave Type", init="Modulated Sine", col="blue", value=["Saw Up", "Saw Down", "Square", "Triangle", "Pulse",
                            "Bipolar Pulse", "Sample and Hold", "Modulated Sine"]),
                cpopup(name="wavetypeY", label="Y Wave Type", init="Modulated Sine", col="green", value=["Saw Up", "Saw Down", "Square", "Triangle", "Pulse",
                            "Bipolar Pulse", "Sample and Hold", "Modulated Sine"]),
                cpopup(name="tsize", label="Terrain Size", init="512", col="grey", rate="i", value=["64", "128", "256", "512", "1024", "2048"]),
                cpoly()
          ]

