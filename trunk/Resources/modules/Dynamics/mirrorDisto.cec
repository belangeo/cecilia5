<CeciliaInterface>
csampler snd -label Audio
cgraph env -label Envelope -unit x -rel lin -min 0 -max 1 -col red -func 0 0 .00001 1 .99 1 1 0
cslider pregain -label Pre gain -min 0 -max 8 -init 1 -unit x -res float -rate k -rel lin -gliss 0.025 -col blue
cslider low -label Low Threshold -res float -min -32768 -max -1 -unit amp -init -10000 -rel lin -col forestgreen -help Amount of distortion
cslider high -label High Threshold -res float -min 1 -max 32768 -unit amp -init 10000 -rel lin -col forestgreen -help Amount of distortion
cslider postgain -label Post gain -min 0 -max 2 -init 1 -unit x -res float -rate k -rel lin -gliss 0.025 -col blue
cslider cutoff -label Lowpass cutoff -res float -min 20 -max 18000 -unit Hz -init 5000 -rel log -col red -help Lowpass filter cutoff frequency
cpoly poly -label voices -min 1 -max 10 -init 1
</CeciliaInterface>

<5.1>

</5.1>

<Custom...>

</Custom...>

<Mono>

            instr 1

aOri1       sampler         [snd],1,p4

aGauche     mirror          aOri1*gkpregain, gklow, gkhigh 
aGauche     dcblock2        aGauche*gkpostgain
aGauche     butterlp        aGauche, gkcutoff

aGauche     =               aGauche * .025 *gkenv / (ampdb(p5)/10)

            out             aGauche

            endin


            instr 2


ktrig       changed         gkpolynum,gkpolyspread
if ktrig == 1 then
            turnoff2        1,0,.5
            reinit          pass
endif
pass:

inum        =               0

generate:
ip4         random          1-i(gkpolyspread), 1+i(gkpolyspread)
            event_i         "i", 1, 0, p3, ip4, i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum        =               inum + 1
goto generate
endif
            endin

</Mono>

<Octo>

</Octo>

<Quad>

</Quad>

<Stereo>

                instr 1

aOri1,aOri2     sampler         [snd],1,p4

aGauche         mirror          aOri1*gkpregain, gklow, gkhigh 
aDroite         mirror          aOri2*gkpregain, gklow, gkhigh 

aGauche         dcblock2        aGauche*gkpostgain
aDroite         dcblock2        aDroite*gkpostgain

aGauche         butterlp        aGauche, gkcutoff
aDroite         butterlp        aDroite, gkcutoff

aGauche         =               aGauche * .025 * gkenv / (ampdb(p5)/10)
aDroite         =               aDroite * .025 * gkenv / (ampdb(p5)/10)

                outs            aGauche,aDroite

                endin

                instr 2

ktrig           changed         gkpolynum,gkpolyspread
if ktrig == 1 then
                turnoff2        1,0,.5
                reinit          pass
endif
pass:

inum            =               0

generate:
ip4             random          1-i(gkpolyspread), 1+i(gkpolyspread)
                event_i         "i", 1, 0, p3, ip4, i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum            =               inum + 1
goto generate
endif
                endin

</Stereo>


<CsoundScore>
;#   p1   p2   p3              p4    p5   
f    1    0    8192            10    1    

i    2    0    [total_time]    
</CsoundScore>


<PythonScore>

</PythonScore>


<CeciliaOpen>
scoreType=Csound


</CeciliaOpen>

<CeciliaData>
</CeciliaData>
