class Module(BaseModule):
    """
    Compression and gate module
    
    Sliders under the graph:
    
        - Input Gain : Adjust the amount of signal sent to the processing chain
        - Compression Thresh : dB value at which the compressor becomes active
        - Compression Rise Time : Time taken by the compressor to reach compression ratio
        - Compression Fall Time : Time taken by the compressor to reach uncompressed state
        - Compression Knee : Steepness of the compression curve
        - Gate Thresh : dB value at which the gate becomes active
        - Gate Slope : Shape of the gate (rise time and fall time)
        - Output Gain : Makeup gain applied after the processing chain
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - Compression Ratio : Ratio between the compressed signal and the uncompressed signal
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addSampler("snd")
        self.crank = Sig(self.snd, mul=DBToA(self.inputgain))
        self.comp = Compress(input=self.crank, thresh=self.compthresh, ratio=1, risetime=self.comprise, falltime=self.compfall, lookahead=5,
                                knee=self.compknee, outputAmp=False, mul=1)
        self.gate = Gate(input=self.comp , thresh=self.gatethresh, risetime=self.gateslope, falltime=self.gateslope, lookahead=5.00, outputAmp=False, mul=1)
        self.out = self.gate*DBToA(self.outputgain)*self.env
        
        #INIT
        self.compratio(self.compratio_index, self.compratio_value)

    def compratio(self, index, value):
        ratioList = [0.25,0.5,1,2,3,5,8,13,21,34,55,100]
        self.comp.ratio = ratioList[index]
    
Interface = [   csampler(name="snd"), 
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="inputgain", label="Input Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="blue"),
                cslider(name="compthresh", label="Compression Thresh", min=-60, max=-0.1, init=-20, rel="lin", unit="dB", col="orange"),
                cslider(name="comprise", label="Compression Rise Time", min=0.01, max=1, init=0.01, rel="lin", unit="sec", col="orange"),
                cslider(name="compfall", label="Compression Fall Time", min=0.01, max=1, init=0.1, rel="lin", unit="sec", col="orange"),
                cslider(name="compknee", label="Compression Knee", min=0, max=1, init=0, rel="lin", unit="x", col="orange"),
                cslider(name="gatethresh", label="Gate Thresh", min=-80, max=-0.1, init=-60, rel="lin", unit="dB", col="grey"),
                cslider(name="gateslope", label="Gate Slope", min=0.01, max=1, init=0.05, rel="lin", unit="x", col="grey"),
                cslider(name="outputgain", label="Output Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="blue"),
                cpopup(name="compratio", label="Compression Ratio", init="1:1", col="orange", value=["0.25:1", "0.5:1", "1:1", "2:1", "3:1", "5:1", "8:1", "13:1", "21:1",
                        "34:1", "55:1", "100:1"]),
                cpoly()
          ]