class Module(BaseModule):
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addSampler("snd")
        chnls = len(self.snd)
        num = 12 * chnls
        self.defamp = Sig([0.05 for i in range(num)])
        
        self.ra = Randi(min=1-self.dev, max=1+self.dev, freq=self.speed * [random.uniform(.95,1.05) for i in range(num)])
        #self.rf1 = Randi(min=1-self.rnddelamp, max=1+self.rnddelamp, freq=self.rnddelspeed)
        self.voices = [self.basefreq*Pow(self.exp, i) for i in range(num)]
        self.frs = self.duplicate(self.voices, chnls)
        self.wgs = Waveguide(input=self.snd, freq=self.frs, dur=60*self.fb, minfreq=10, mul=self.ra*self.defamp)
        self.out = Interp(self.snd, self.wgs.mix(chnls), self.drywet, mul=self.env)
        
Interface = [   csampler(name="snd"), 
                cgraph(name="env", label="Overall Envelope", col="blue"),
                cslider(name="basefreq", label="Base Freq", min=10, max=1000, init=30, rel="log", unit="Hertz", col="blue"),
                cslider(name="exp", label="WG Expansion", min=0, max=4, init=1.1, rel="lin", unit="x", col="lightblue"),
                cslider(name="fb", label="WG Feedback", min=0, max=0.999, init=0.5, rel="lin", unit="x", col="lightblue"),
                cslider(name="filter", label="WG Filter", min=0, max=0.25, init=0, rel="lin", unit="x", col="lightblue"),
                cslider(name="dev", label="Deviation Amp", min=0.001, max=1, init=0.01, rel="log", unit="x", col="green"),
                cslider(name="speed", label="Deviation Speed", min=0.01, max=120, init=1, rel="log", unit="Hertz", col="green"),
                cslider(name="drywet", label="Dry / Wet", min=0, max=1, init=1, rel="lin", unit="x", col="blue"),
                cpoly()
          ]

