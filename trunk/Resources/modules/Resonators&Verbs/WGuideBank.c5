import random
class Module(BaseModule):
    """
    Multiple waveguide models module
    
    Sliders under the graph:
    
        - Base Freq : Base pitch of he waveguides
        - WG Expansion : Spread between waveguides
        - WG Feedback : Length of the waveguides
        - WG Filter : Center frequency of the filter
        - Amp Deviation Amp : Amplitude of the jitter applied on the waveguides amplitude
        - Amp Deviation Speed : Frequency of the jitter applied on the waveguides amplitude
        - Freq Deviation Amp : Amplitude of the jitter applied on the waveguides pitch
        - Freq Deviation Speed : Frequency of the jitter applied on the waveguides pitch
        - Dry / Wet : Mix between the original signal and the waveguides
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - Filter Type : Type of filter used
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addSampler("snd")
        chnls = len(self.snd)
        num = 12 * chnls
        self.defamp = Sig([0.05 for i in range(num)])
        self.ra = Randi(min=1-self.dev, max=1+self.dev, freq=self.speed*[random.uniform(0.95,1.05) for i in range(num)])
        self.rf = Randi(min=1-self.fdev, max=1+self.fdev, freq=self.fspeed*[random.uniform(0.97,1.03) for i in range(num)])
        self.voices = [self.basefreq*Pow(self.exp, i) for i in range(num)]
        self.frs = self.duplicate(self.voices, chnls)
        self.wgs = Waveguide(input=self.snd, freq=self.frs, dur=60*self.fb, minfreq=10, mul=self.ra*self.defamp)
        self.wgsm = self.wgs.mix(chnls)
        self.biquad = Biquadx(self.wgsm, freq=self.filter, q=1, type=self.filttype_index, stages=4, mul=1)
        self.out = Interp(self.snd, self.biquad, self.drywet, mul=self.env)
        
    def filttype(self, index, value):
        self.biquad.type = index
            
Interface = [   csampler(name="snd"), 
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="basefreq", label="Base Freq", min=10, max=1000, init=40, rel="log", unit="Hz", col="blue"),
                cslider(name="exp", label="WG Expansion", min=0, max=4, init=0.9975, rel="lin", unit="x", col="lightblue"),
                cslider(name="fb", label="WG Feedback", min=0, max=0.999, init=0.7, rel="lin", unit="x", col="lightblue"),
                cslider(name="filter", label="WG Filter", min=50, max=20000, init=20000, rel="log", unit="Hz", col="lightblue"),
                cslider(name="dev", label="Amp Deviation Amp", min=0.001, max=1, init=0.01, rel="log", unit="x", col="green"),
                cslider(name="speed", label="Amp Deviation Speed", min=0.01, max=120, init=1, rel="log", unit="Hz", col="green"),
                cslider(name="fdev", label="Freq Deviation Amp", min=0.001, max=1, init=0.01, rel="log", unit="x", col="green"),
                cslider(name="fspeed", label="Freq Deviation Speed", min=0.01, max=120, init=1, rel="log", unit="Hz", col="green"),
                cslider(name="drywet", label="Dry / Wet", min=0, max=1, init=1, rel="lin", unit="x", col="blue"),
                cpopup(name="filttype", label="Filter Type", init="Lowpass", col="chorusyellow", value=["Lowpass","Highpass","Bandpass","Bandstop"]),
                cpoly()
          ]

