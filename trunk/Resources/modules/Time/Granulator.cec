<CeciliaInterface>
cfilein snd -label File
cgraph env -label Envelope -unit x -rel lin -min 0 -max 1 -col red -func 0 0 .001 1 .999 1 1 0
cslider pitch -label Transpose -unit semitones -rel lin -min -24. -max 24. -init 0. -col green
cslider pos -label Grain Position -min 0 -max 1  -col blue -func 0 0 1 1
cslider dur -label Grain Duration -min 0.01 -max 1 -init .2 -col blue
cslider posrnd -label Position Random -min 0.0001 -max 1 -init 0.0001 -rel log -col red
cslider durrnd -label Pitch Random -min 0.0001 -max 1 -init 0.0001 -rel log -col red
cslider no_of_grains -label # of Grains -min 1 -max 64 -init 12 -res int -rate i -gliss 0

cgen trdiscreet -label Discreet transpo -col red -init 1, 0

cpoly poly -label voices -min 1 -max 10 -init 1
</CeciliaInterface>

<5.1>

</5.1>

<Custom...>

</Custom...>

<Mono>
gi1, gi2            tables          [snd]

opcode myGrain2, aa, kkkiiiip
kpos, kdur, kfr, itab, itab2, ienv, igrs, inum xin

itabdur             =               nsamp(itab)
if itabdur != 0 igoto continue
itabdur             tableng         itab
continue:

ipharnd             random          0, .005
iphase              =               inum / igrs + ipharnd

if (inum >= igrs) goto initdone
a1, a2 myGrain2 kpos, kdur, kfr, itab, itab2, ienv, igrs, inum+1

initdone:
apos                upsamp          kpos * itabdur 
adur                upsamp          kdur
apha                phasor          kfr, iphase
aenv                tab             apha, ienv, 1
atrig               =               int(1-aenv)
aindex              samphold        apos, atrig
atrans              samphold        adur, atrig

aline               =               apha * atrans * sr + aindex
aline               limit           aline, 0, itabdur
ag                  tablei          aline, itab, 0
ad                  tablei          aline, itab2, 0
aout1               =               ag * aenv
aout2               =               ad * aenv

amix1               =               aout1 + a1
amix2               =               aout2 + a2

                    xout            amix1, amix2
endop

                    instr 1

krpos               rand            gkposrnd
krndpos             random          .997, 1.003
kpos                =               gkpos*krndpos+krpos

ktrrnd              random          0, gitrdiscreetlen-0.001
ktrchoice           table           int(ktrrnd), gitrdiscreet

kdrnd               rand            gkdurrnd
krnddur             random          .997, 1.003
kdur                =               gkdur*ktrchoice*krnddur+kdrnd

kpitch              =               semitone(gkpitch) / gkdur

aProc1, aProc2      myGrain2        kpos, kdur, kpitch*p4, gi1, gi2, 7, gino_of_grains


kamp                gainslider      128-(gino_of_grains/3)

aGauche             =               aProc1 * kamp * 500 * gkenv / (ampdb(p5)/10) 

                    out            aGauche
                    endin


           instr 2


ktrig       changed     gkpolynum,gkpolyspread
if ktrig = 1 then
            turnoff2    1,0,.5
            reinit      pass
endif
pass:

inum        =           0
generate:
ip4         random      1-i(gkpolyspread), 1+i(gkpolyspread)
            event_i     "i", 1, 0, p3, ip4,i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum        =           inum + 1
goto generate
endif
            endin

</Mono>

<Octo>

</Octo>

<Quad>

</Quad>

<Stereo>
gi1, gi2            tables          [snd]

opcode myGrain2, aa, kkkiiiip
kpos, kdur, kfr, itab, itab2, ienv, igrs, inum xin

itabdur             =               nsamp(itab)
if itabdur != 0 igoto continue
itabdur             tableng         itab
continue:

ipharnd             random          0, .005
iphase              =               inum / igrs + ipharnd

if (inum >= igrs) goto initdone
a1, a2 myGrain2 kpos, kdur, kfr, itab, itab2, ienv, igrs, inum+1

initdone:
apos                upsamp          kpos * itabdur 
adur                upsamp          kdur
apha                phasor          kfr, iphase
aenv                tab             apha, ienv, 1
atrig               =               int(1-aenv)
aindex              samphold        apos, atrig
atrans              samphold        adur, atrig

aline               =               apha * atrans * sr + aindex
aline               limit           aline, 0, itabdur
ag                  tablei          aline, itab, 0
ad                  tablei          aline, itab2, 0
aout1               =               ag * aenv
aout2               =               ad * aenv

amix1               =               aout1 + a1
amix2               =               aout2 + a2

                    xout            amix1, amix2
endop

                    instr 1

krpos               rand            gkposrnd
krndpos             random          .997, 1.003
kpos                =               gkpos*krndpos+krpos

ktrrnd              random          0, gitrdiscreetlen-0.001
ktrchoice           table           int(ktrrnd), gitrdiscreet

kdrnd               rand            gkdurrnd
krnddur             random          .997, 1.003
kdur                =               gkdur*ktrchoice*krnddur+kdrnd

kpitch              =               semitone(gkpitch) / gkdur

aProc1, aProc2      myGrain2        kpos, kdur, kpitch*p4, gi1, gi2, 7, gino_of_grains


kamp                gainslider      128-(gino_of_grains/3)


aGauche             =               aProc1 * kamp * 500 * gkenv / (ampdb(p5)/10) 
aDroite             =               aProc2 * kamp * 500 * gkenv / (ampdb(p5)/10)

                    outs            aGauche, aDroite
                    endin


           instr 2


ktrig       changed     gkpolynum,gkpolyspread
if ktrig = 1 then
            turnoff2    1,0,.5
            reinit      pass
endif
pass:

inum        =           0
generate:
ip4         random      1-i(gkpolyspread), 1+i(gkpolyspread)
            event_i     "i", 1, 0, p3, ip4,i(gkpolynum)+1

if (inum < i(gkpolynum)) then
inum        =           inum + 1
goto generate
endif
            endin

</Stereo>


<CsoundScore>
;#   p1   p2   p3              p4    p5   p6   
f    7    0    8192            20    2    1    


i    2    0    [total_time]    

e    
</CsoundScore>


<PythonScore>

</PythonScore>


<CeciliaOpen>
scoreType=Csound

</CeciliaOpen>

<CeciliaData>
</CeciliaData>
