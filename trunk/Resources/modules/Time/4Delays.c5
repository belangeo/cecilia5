class Module(BaseModule):
    """
    Waveterrain synthesis module
    
    2 stereo delays with parallel or serial routing:
    
        - Delay 1 Right : Delay time of first delay
        - Delay 1 Left : Delay time of second delay
        - Delay 1 Feedback : Amount of delayed signal fed back to the delay
        - Delay 1 Mix : Gain of the delayed signal
        - Delay 2 Right : Delay time of third delay
        - Delay 2 Left : Delay time of fourth delay
        - Delay 2 Feedback : Amount of delayed signal fed back to the delay
        - Delay 2 Mix : Gain of the delayed signal
        - Jitter Amp : Amplitude of the jitter applied on the delays amplitudes
        - Jitter Speed : Speed of the jitter applied on the delays amplitudes
        - Filter Freq : Center frequency of the filter
        - Filter Q : Q factor of the filter
        - Dry / Wet : Mix between the original signal and the processed signals
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - Delay Routing : Type of routing
        - Filter Type : Type of filter
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addSampler("snd")
        self.prefilt = Biquadx(self.snd, freq=self.filter, q=self.filterq, type=self.filttype_index, stages=2, mul=0.25)
        self.filtChoice = SigTo(0, time=0.1, init=0)
        self.toDelays = Interp(self.prefilt, self.snd, interp=self.filtChoice)
        self.jit1 = Randi(min=1-self.jitamp, max=1+self.jitamp, freq=self.jitspeed)
        self.jit2 = Randi(min=1-self.jitamp, max=1+self.jitamp, freq=self.jitspeed)
        self.jit3 = Randi(min=1-self.jitamp, max=1+self.jitamp, freq=self.jitspeed)
        self.jit4 = Randi(min=1-self.jitamp, max=1+self.jitamp, freq=self.jitspeed)
        self.amp1 = DBToA(self.del1m)
        self.amp2 = DBToA(self.del2m)
        self.delay1 = Delay(self.toDelays, delay=[self.del1l*self.jit1,self.del1r*self.jit2], feedback=self.del1f, maxdelay=10, mul=self.amp1)
        self.delay2 = Delay(self.toDelays, delay=[self.del2l*self.jit3,self.del2r*self.jit4], feedback=self.del2f, maxdelay=10, mul=self.amp2)
        self.dels = self.delay1+self.delay2
        self.postfilt = Biquadx(self.dels, freq=self.filter, q=self.filterq, type=self.filttype_index, stages=2, mul=0.25)
        self.toOuts = Interp(self.dels, self.postfilt, interp=self.filtChoice)
        self.deg = Interp(self.snd, self.toOuts, self.drywet, mul=self.env)

        self.osc = Sine(10000,mul=.1)
        self.balanced = Balance(self.deg, self.osc, freq=10)
        self.out = Interp(self.deg, self.balanced)

#INIT
        self.balance(self.balance_index, self.balance_value)
        self.routing(self.routing_index, self.routing_value)
        self.filtrouting(self.filtrouting_index, self.filtrouting_value)

    def balance(self,index,value):
        if index == 0:
            self.out.interp  = 0
        elif index ==1:
            self.out.interp  = 1
            self.balanced.input2 = self.osc
        elif index == 2:
            self.out.interp = 1
            self.balanced.input2 = self.snd
 
    def filttype(self, index, value):
        self.prefilt.type = index
        self.postfilt.type = index

    def routing(self, index, value):
        if index == 0:
            self.delay2.setInput(self.delay1, 0.1)
            self.postfilt.setInput(self.delay2, 0.1)
        else:
            self.delay2.setInput(self.toDelays, 0.1)
            self.postfilt.setInput(self.dels, 0.1)

    def filtrouting(self, index, value):
        self.filtChoice.value = index
            
Interface = [   csampler(name="snd", label="Audio"),
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="del1l", label="Delay 1 Left", min=0.0001, max=10, init=0.26, gliss=0.1, rel="log", unit="sec", half=True, col="blue"),
                cslider(name="del2l", label="Delay 2 Left", min=0.0001, max=10, init=0.16, gliss=0.1, rel="log", unit="sec", half=True, col="green"),
                cslider(name="del1r", label="Delay 1 Right", min=0.0001, max=10, gliss=0.1, init=0.25, rel="log", unit="sec", half=True, col="blue"),
                cslider(name="del2r", label="Delay 2 Right", min=0.0001, max=10, init=0.15, gliss=0.1, rel="log", unit="sec", half=True, col="green"),
                cslider(name="del1f", label="Delay 1 Feedback", min=0, max=0.999, init=0.5, rel="lin", unit="x", half=True, col="blue"),
                cslider(name="del2f", label="Delay 2 Feedback", min=0, max=0.999, init=0.5, rel="lin", unit="x", half=True, col="green"),
                cslider(name="del1m", label="Delay 1 Mix", min=-48, max=18, init=0, rel="lin", unit="dB", half=True, col="blue"),
                cslider(name="del2m", label="Delay 2 Mix", min=-48, max=18, init=0, rel="lin", unit="dB", half=True, col="green"),
                cslider(name="jitamp", label="Jitter Amp", min=0.0001, max=1, init=0.1, rel="log", unit="x", col="red2", half=True),
                cslider(name="jitspeed", label="Jitter Speed", min=0.0001, max=50, init=0.03, rel="log", unit="Hz", col="red2", half=True),
                cslider(name="filter", label="Filter Freq", min=30, max=20000, init=15000, rel="log", unit="Hz", col="tan"),
                cslider(name="filterq", label="Filter Q", min=0.5, max=10, init=0.707, rel="log", unit="Q", col="tan"),
                cslider(name="drywet", label="Dry / Wet", min=0, max=1, init=1, rel="lin", unit="x", col="blue"),
                cpopup(name="routing", label="Delay Routing", init="Parallel", col="purple1", value=["Serial","Parallel"]),
                cpopup(name="filttype", label="Filter Type", init="Lowpass", col="chorusyellow", value=["Lowpass","Highpass","Bandpass","Bandstop"]),
                cpopup(name="filtrouting", label="Filter Routing", init="Pre", col="chorusyellow", value=["Pre","Post"]),
                cpopup(name="balance", label = "Balance", init= "Off", col="blue", value=["Off","Compress", "Source"]),
                cpoly()
          ]
