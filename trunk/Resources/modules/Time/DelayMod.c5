class Module(BaseModule):
    """
    Stereo delay module with jitter control
    
    Sliders under the graph:
    
        - Delay Left : Delay time of first delay
        - Delay Right : Delay time of second delay
        - AmpModDepth Left : Range of the amplitude jitter for the first delay
        - AmpModDepth Right : Range of the amplitude jitter for the second delay
        - AmpModFreq Left : Speed of the amplitude jitter for the first delay
        - AmpModFreq Right : Speed of the amplitude jitter for the second delay
        - DelayModDepth Left : Range of the delay time jitter for the first delay
        - DelayModDepth Right : Range of the delay time jitter for the second delay
        - DelayModFreq Left : Speed of the delay time jitter for the first delay
        - DelayModFreq Right : Speed of the delay time jitter for the second delay
        - Feedback : Amount of delayed signal fed back in the delay chain
        - Dry / Wet : Mix between the original signal and the delayed signals
    
    Dropdown menus, toggles and sliders on the bottom left:

        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
        
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addSampler("snd")
        self.jitl = Randi(min=1-self.jitampl, max=1+self.jitampl, freq=self.jitampspeedl)
        self.jitr = Randi(min=1-self.jitampr, max=1+self.jitampr, freq=self.jitampspeedr)
        self.jittl = Randi(min=1-self.jittimel, max=1+self.jittimel, freq=self.jittimespeedl)
        self.jittr = Randi(min=1-self.jittimer, max=1+self.jittimer, freq=self.jittimespeedr)
        self.delay = Delay(self.snd, delay=[self.dell*self.jittl,self.delr*self.jittr], feedback=self.fb, maxdelay=15, mul=[self.jitl,self.jitr])
        self.out = Interp(self.snd, self.delay, self.drywet, mul=self.env)

Interface = [   csampler(name="snd", label="Audio"),
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="dell", label="Delay Left", min=0.0001, max=15, init=0.5, gliss=0.1, rel="log", unit="seconds", col="green"),
                cslider(name="delr", label="Delay Right", min=0.0001, max=15, init=1, gliss=0.1, rel="log", unit="seconds", col="green"),
                cslider(name="jitampl", label="AmpModDepth Left", min=0.001, max=1, init=0.5, rel="log", unit="x", col="blue"),
                cslider(name="jitampr", label="AmpModDepth Right", min=0.001, max=1, init=0.5, rel="log", unit="x", col="blue"),
                cslider(name="jitampspeedl", label="AmpModFreq Left", min=0.001, max=200, init=1, rel="log", unit="Hertz", col="red"),
                cslider(name="jitampspeedr", label="AmpModFreq Right", min=0.001, max=200, init=1.1, rel="log", unit="Hertz", col="red"),
                cslider(name="jittimel", label="DelayModDepth Left", min=0.001, max=1, init=0.5, rel="log", unit="x", col="blue"),
                cslider(name="jittimer", label="DelayModDepth Right", min=0.001, max=1, init=0.5, rel="log", unit="x", col="blue"),
                cslider(name="jittimespeedl", label="DelayModFreq Left", min=0.001, max=200, init=1, rel="log", unit="Hertz", col="red"),
                cslider(name="jittimespeedr", label="DelayModFreq Right", min=0.001, max=200, init=1.1, rel="log", unit="Hertz", col="red"),
                cslider(name="fb", label="Feedback", min=0, max=0.999, init=0.8, rel="lin", unit="x", col="tan"),
                cslider(name="drywet", label="Dry / Wet", min=0, max=1, init=1, rel="lin", unit="x", col="blue"),
                cpoly()
          ]
