class Module(BaseModule):
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addFilein("snd")
        self.rtempo = 1/(self.tempo/15)
        self.setGlobalSeed(int(self.seed.get()))
        self.beat1 = Beat(time=self.rtempo, taps=int(self.taps.get()), w1=80, w2=40, w3=20, poly=8).play()
        self.beat2 = Beat(time=self.rtempo, taps=int(self.taps.get()), w1=50, w2=100, w3=50, poly=8).play()
        self.beat3 = Beat(time=self.rtempo, taps=int(self.taps.get()), w1=30, w2=60, w3=70, poly=8).play()
        self.tre1 = TrigEnv(input=self.beat1, table=self.adsr1, dur=self.tapsl1, mul=self.beat1['amp'])
        self.tre2 = TrigEnv(input=self.beat2, table=self.adsr2, dur=self.tapsl2, mul=self.beat2['amp'])
        self.tre3 = TrigEnv(input=self.beat3, table=self.adsr3, dur=self.tapsl3, mul=self.beat3['amp'])
        self.linseg1 = TrigLinseg(input=self.beat1, list=[(0,self.bindex1.get()),(self.tapsl1.get(),1/(self.snd.getDur(False)/self.tapsl1.get())+self.bindex1.get())])
        self.linseg2 = TrigLinseg(input=self.beat2, list=[(0,self.bindex2.get()),(self.tapsl2.get(),(1/(self.snd.getDur(False)/self.tapsl2.get()))+self.bindex2.get())])
        self.linseg3 = TrigLinseg(input=self.beat3, list=[(0,self.bindex3.get()),(self.tapsl3.get(),(1/(self.snd.getDur(False)/self.tapsl3.get()))+self.bindex3.get())])
        self.trf1 = TrigFunc(self.linseg1['trig'], self.newseg1)
        self.trf2 = TrigFunc(self.linseg2['trig'], self.newseg2)
        self.trf3 = TrigFunc(self.linseg3['trig'], self.newseg3)
        self.again1 = DBToA(self.gain1)
        self.again2 = DBToA(self.gain2)
        self.again3 = DBToA(self.gain3)
        self.pointer1 = Pointer(table=self.snd, index=self.linseg1, mul=self.tre1*self.again1)
        self.pointer2 = Pointer(table=self.snd, index=self.linseg2, mul=self.tre2*self.again2)
        self.pointer3 = Pointer(table=self.snd, index=self.linseg3, mul=self.tre3*self.again3)
        self.mixx = self.pointer1+self.pointer2+self.pointer3
        self.out = Sig(self.mixx, mul=self.env).mix(self.nchnls)
        
    def seed_up(self, value):
        self.setGlobalSeed(int(value))
        self.beat1.new()
        self.beat2.new()
        self.beat3.new()
        
    def newseg1(self):
        self.linseg1.setList([(0,self.bindex1.get()),(self.tapsl1.get(),1/(self.snd.getDur()/self.tapsl1.get())+self.bindex1.get())])
        
    def newseg2(self):
        self.linseg2.setList([(0,self.bindex2.get()),(self.tapsl2.get(),1/(self.snd.getDur()/self.tapsl2.get())+self.bindex2.get())])
        
    def newseg3(self):
        self.linseg3.setList([(0,self.bindex3.get()),(self.tapsl3.get(),1/(self.snd.getDur()/self.tapsl3.get())+self.bindex3.get())])
        
    def taps_up(self, value):
        self.beat1.setTaps(value)
        self.beat2.setTaps(value)
        self.beat3.setTaps(value)
        
    def we1_up(self, value):
        w1 = int(value)
        if value <= 50:
            w2 = int(value*2)
        else:
            w2 = int((100-value)*2)
        w3 = int(100-value)
            
        self.beat1.setW1(w1)
        self.beat1.setW2(w2)
        self.beat1.setW3(w3)
        
    def we2_up(self, value):
        w1 = int(value)
        if value <= 50:
            w2 = int(value*2)
        else:
            w2 = int((100-value)*2)
        w3 = int(100-value)
        
        self.beat2.setW1(w1)
        self.beat2.setW2(w2)
        self.beat2.setW3(w3)
        
    def we3_up(self, value):
        w1 = int(value)
        if value <= 50:
            w2 = int(value*2)
        else:
            w2 = int((100-value)*2)
        w3 = int(100-value)
        
        self.beat3.setW1(w1)
        self.beat3.setW2(w2)
        self.beat3.setW3(w3)
        
Interface = [   cfilein(name="snd", label="Audio"),
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cgraph(name="adsr1", label="Beat 1 ADSR", func=[(0,0),(0.1,1),(0.122,0.25),(1,0)], table=True, col="blue"),
                cgraph(name="adsr2", label="Beat 2 ADSR", func=[(0,0),(0.1,1),(0.122,0.25),(1,0)], table=True, col="blue"),
                cgraph(name="adsr3", label="Beat 3 ADSR", func=[(0,0),(0.1,1),(0.122,0.25),(1,0)], table=True, col="blue"),
                cslider(name="taps", label="# of Taps", min=1, max=64, init=16, res="int", up=True, rel="lin", unit="x"),
                cslider(name="tempo", label="Tempo", min=20, max=240, gliss=0, init=120, rel="lin", unit="bpm", col="green"),
                cslider(name="tapsl1", label="Beat 1 Tap Length", min=0.1, max=1, init=0.1, rel="lin", unit="seconds", col="tan"),
                cslider(name="tapsl2", label="Beat 2 Tap Length", min=0.1, max=1, init=0.2, rel="lin", unit="seconds", col="tan"),
                cslider(name="tapsl3", label="Beat 3 Tap Length", min=0.1, max=1, init=0.4, rel="lin", unit="seconds", col="tan"),
                cslider(name="bindex1", label="Beat 1 Index", min=0, max=1, init=0, rel="lin", unit="x", col="chorusyellow"),
                cslider(name="bindex2", label="Beat 2 Index", min=0, max=1, init=0.4, rel="lin", unit="x", col="chorusyellow"),
                cslider(name="bindex3", label="Beat 3 Index", min=0, max=1, init=0.8, rel="lin", unit="x", col="chorusyellow"),
                cslider(name="we1", label="Beat 1 Distribution", min=0, max=100, init=80, up=True, res="int", rel="lin", unit="%", col="orange"),
                cslider(name="we2", label="Beat 2 Distribution", min=0, max=100, init=50, rel="lin", up=True, res="int", unit="%", col="orange"),
                cslider(name="we3", label="Beat 3 Distribution", min=0, max=100, init=30, rel="lin", up=True, res="int", unit="%", col="orange"),
                cslider(name="gain1", label="Beat 1 Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="chorusyellow"),
                cslider(name="gain2", label="Beat 2 Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="chorusyellow"),
                cslider(name="gain3", label="Beat 3 Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="chorusyellow"),
                cslider(name="seed", label="Global seed", min=0, max=5000, init=0, rel="lin", res="int", unit="x", up=True),
                cpoly()
          ]
