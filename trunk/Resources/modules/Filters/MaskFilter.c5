class Module(BaseModule):
    """
    Ranged filter module using lowpass and highpass filters
    
    Sliders under the graph:
    
        - Filter Limits : Range of the filter (min = lowpass, max = highpass)
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - Number of Stages : Amount of stacked biquad filters
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addSampler("snd")
        self.lp = Biquadx(input=self.snd, freq=self.filtrange[1], q=1, type=0, stages=int(self.filtnum_value), mul=1)
        self.out = Biquadx(input=self.lp, freq=self.filtrange[0], q=1, type=1, stages=int(self.filtnum_value), mul=self.env)
        
    def filtnum(self, index, value):
        self.lp.stages = int(value)
        self.out.stages = int(value)
            
Interface = [   csampler(name="snd"), 
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                crange(name="filtrange", label="Filter Limits", min=20, max=20000, rel="log", unit="Hertz", col="green"),
                cpopup(name="filtnum", label="Number of Stages", init="4", col="grey", value=["1","2","3","4","5","6","7","8","9","10"]),
                cpoly()
          ]