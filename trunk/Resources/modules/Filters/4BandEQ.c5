class Module(BaseModule):
    """
    Four band equalization module
    
    Sliders under the graph:
    
        - Band 1 Gain : Gain of the first band
        - Low Freq Split : First point of the frequency splitter
        - Band 2 Gain : Gain of the second band
        - Mid Freq Split : Second point of the frequency splitter
        - Band 3 Gain : Gain of the third band
        - High Freq Split : Third point of the frequency splitter
        - Band 4 Gain : Gain of the fourth band
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - On/Off Band 1 : Mute or unmute the first band
        - On/Off Band 2 : Mute or unmute the second band
        - On/Off Band 3 : Mute or unmute the third band
        - On/Off Band 4 : Mute or unmute the fourth band
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addSampler("snd")
        self.eqmuls = Sig([DBToA(self.band1gain), DBToA(self.band2gain), DBToA(self.band3gain), DBToA(self.band4gain)], mul=[1,1,1,1])
        self.eq = FourBand(input=self.snd, freq1=self.lowfreq, freq2=self.midfreq, freq3=self.highfreq, mul=self.eqmuls)
        self.out = self.eq*self.env
        
        #INIT
        self.onoffb1(self.onoffb1_value)
        self.onoffb2(self.onoffb2_value)
        self.onoffb3(self.onoffb3_value)
        self.onoffb4(self.onoffb4_value)

    def setmul(self, order, value):
        muls = self.eqmuls.mul
        muls[order]=value
        self.eqmuls.mul = muls
         
    def onoffb1(self, value):
        self.setmul(0, value)

    def onoffb2(self, value):
        self.setmul(1, value)

    def onoffb3(self, value):
        self.setmul(2, value)

    def onoffb4(self, value):
        self.setmul(3, value)

Interface = [   csampler(name="snd"), 
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                cslider(name="band1gain", label="Band 1 Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="blue"),
                cslider(name="lowfreq", label="Low Freq Split", min=50, max=400, init=150, rel="log", unit="Hertz", col="green"),
                cslider(name="band2gain", label="Band 2 Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="blue"),
                cslider(name="midfreq", label="Mid Freq Split", min=400, max=1500, init=500,  rel="log", unit="Hertz", col="green"),
                cslider(name="band3gain", label="Band 3 Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="blue"),
                cslider(name="highfreq", label="High Freq Split", min=1500, max=15000, init=2000, rel="log", unit="Hertz", col="green"),
                cslider(name="band4gain", label="Band 4 Gain", min=-48, max=18, init=0, rel="lin", unit="dB", col="blue"),
                ctoggle(name="onoffb1", label="On/Off Band 1", init=1, col="orange"),
                ctoggle(name="onoffb2", label="On/Off Band 2", init=1, col="orange"),
                ctoggle(name="onoffb3", label="On/Off Band 3", init=1, col="orange"),
                ctoggle(name="onoffb4", label="On/Off Band 4", init=1, col="orange"),
                cpoly()
          ]

