import random
class Module(BaseModule):
    """
    Looper module with optional amplitude and frequency modulation
    
    Sliders under the graph:
    
        - AM Range : Amplitude of the AM LFO
        - AM Speed : Frequency of the AM LFO
        - FM Range : Amplitude of the FM LFO
        - FM Speed : Frequency of the FM LFO
        - Index Range : Range of the soundfile to loop
        - Dry / Wet : Mix between the original signal and the processed signal
    
    Dropdown menus, toggles and sliders on the bottom left:
    
        - AM LFO Type : Shape of the AM wave
        - AM On/Off : Activate or deactivate amplitude modulation
        - FM LFO Type : Shape of the FM wave
        - FM On/Off : Activate or deactivate frequency modulation
        - # of Voices : Number of voices played simultaneously (polyphony), only available at initialization time
        - Polyphony Spread : Pitch variation between voices (chorus), only available at initialization time
    
    Graph only parameters :
    
        - Overall Amplitude : The amplitude curve applied on the total duration of the performance
    """
    def __init__(self):
        BaseModule.__init__(self)
        self.snd = self.addFilein("snd")
        self.lfoam = LFO(freq=self.amspeed, sharp=1, type=self.ampwave_index, mul=0.37, add=0.6)
        self.lfoamrange = Randi(min=self.amrange[0], max=self.amrange[1], freq=self.amspeed, mul=self.lfoam)
        self.lfofm = LFO(freq=self.fmspeed, sharp=1, type=self.freqwave_index, mul=0.05, add=1)
        self.sig1 = Sig(self.fmrange[0])
        self.sig2 = Sig(self.fmrange[1])
        self.lfofmrange = Randi(min=1-self.sig1, max=1+self.sig2, freq=self.fmspeed, mul=self.lfofm)
        self.getdur = self.snd.getDur(False)
        self.loopdur = self.index[1]*self.getdur-self.index[0]*self.getdur
        self.pitrnds = [random.uniform(1.0-self.polyphony_spread, 1.0+self.polyphony_spread) for i in range(self.number_of_voices*2)]
        self.ply = [i*self.lfofmrange for i in self.pitrnds]
        self.pointer = Looper(self.snd, pitch=self.ply, start=self.index[0]*self.getdur, dur=self.loopdur, startfromloop=True,
                                    xfadeshape=1, autosmooth=True, mul=self.lfoamrange)
        self.pointer2 = Looper(self.snd, pitch=self.pitrnds, start=self.index[0]*self.getdur, dur=self.loopdur, xfadeshape=1, startfromloop=True,
                                    autosmooth=True, mul=1)
        self.out = Interp(self.pointer2, self.pointer, self.drywet, mul=self.env)
        
        #INIT
        self.onoffam(self.onoffam_value)
        self.onofffm(self.onofffm_value)
        
    def ampwave(self, index, value):
        self.lfoam.type = index
        
    def freqwave(self, index, value):
        self.lfofm.type = index
                
    def onoffam(self, value):
        if value == 0:
            self.pointer.mul = 1
        else:
            self.pointer.mul = self.lfoamrange
        
    def onofffm(self, value):
        if value == 0:
            self.pointer.pitch = self.pitrnds
        else:
            self.pointer.pitch = self.lfofmrange*self.pitrnds

Interface = [   cfilein(name="snd"), 
                cgraph(name="env", label="Overall Amplitude", func=[(0,1),(1,1)], col="blue"),
                crange(name="amrange", label="AM Range", min=0.001, max=1, init=[0.3,0.5], rel="lin", unit="x", col="green"),
                cslider(name="amspeed", label="AM Speed", min=0.001, max=2000, init=4, rel="log", unit="Hz", col="green"),
                crange(name="fmrange", label="FM Range", min=0.001, max=0.2, init=[0.01,0.05], rel="lin", unit="x", col="orange"),
                cslider(name="fmspeed", label="FM Speed", min=0.001, max=2000, init=4, rel="log", unit="Hz", col="orange"),
                crange(name="index", label="Index Range", min=0, max=1, init=[0,1], rel="lin", unit="x", col="tan"),
                cslider(name="drywet", label="Dry / Wet", min=0, max=1, init=1, rel="lin", unit="x", col="grey"),
                cpopup(name="ampwave", label="AM LFO Type", init="Square", col="green", value=["Saw Up", "Saw Down", "Square", "Triangle", "Pulse", "Bipolar Pulse",
                            "Sample and Hold", "Modulated Sine"]),
                ctoggle(name="onoffam", label="AM On/Off", init=0, col="green"),
                cpopup(name="freqwave", label="FM LFO Type", init="Square", col="orange", value=["Saw Up", "Saw Down", "Square", "Triangle", "Pulse", "Bipolar Pulse",
                            "Sample and Hold", "Modulated Sine"]),
                ctoggle(name="onofffm", label="FM On/Off", init=0, col="orange"),
                cpoly()
          ]