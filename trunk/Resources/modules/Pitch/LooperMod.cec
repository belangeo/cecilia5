<CeciliaInterface>
csampler snd -label audio
cgraph env -label Envelope -unit x -col red -rel lin -min 0 -max 1 -func 0 0 .001 1 .999 1 1 0 
cslider ampmodran -label AM Range -rel lin -min 0 -max 1 -init 1 -gliss 0 -col green
cslider ampmodfreq -label AM Speed -unit bpm -rel log -min 10 -max 2400 -init 480 -gliss 0  -col green
cslider freqmoddepth -label FM Range -rel lin -min 0 -max 24 -init 0 -gliss 0 -col red
cslider freqmodfreq -label FM Speed -unit bpm -rel log -min 10 -max 2400 -init 240 -gliss 0 -col red
cslider mix -label Dry/Wet -min 0 -max 100 -unit % -init 100 -col blue
cpopup ampwave -label Amp wave -value Sinus Square Sawtooth Ramp Sample&Hold  -init Square  -col green
ctoggle modamp -label Amp Modulation -init 1  -col green
ctoggle modampste -label Stereo Amp Mod -init 1  -col green
cpopup freqwave -label Freq wave -value Sinus Square Sawtooth Ramp Sample&Hold -init Square -col red
ctoggle modfreq -label Freq Modulation -init 1  -col red
cpoly poly -label voices -min 1 -max 10 -init 1
</CeciliaInterface>

<5.1>

</5.1>

<Custom...>

</Custom...>

<Mono>
gia            ftgen      100, 0, 8193,  10, 1
gib            ftgen      13, 0, 8193, 7, 0, 5, -1, 4081, -1, 10, 1, 4081,  1, 5, 0
gic            ftgen      14, 0, 8193, 7, -1, 5, 1, 8187, -1
gid            ftgen      15, 0, 8193, 7, -1, 5, -1, 8187, 1

               instr    1   

kfreqmodfreq   =          gkfreqmodfreq/60
kfreqmoddepth  =          gkfreqmoddepth
kampmodran     =          gkampmodran
kampmodfreq    =          gkampmodfreq/60

kmod1          oscili     kfreqmoddepth, kfreqmodfreq*p4, 100    
kmod2          oscili     kfreqmoddepth, kfreqmodfreq*p4, 13  
kmod3          oscili     kfreqmoddepth, kfreqmodfreq*p4, 14  
kmod4          oscili     kfreqmoddepth, kfreqmodfreq*p4, 15  
kmod5          randh      kfreqmoddepth, kfreqmodfreq*p4, .365*p4

if gkfreqwave     ==     0   goto sine
if gkfreqwave     ==     1      goto square
if gkfreqwave     ==     2     goto saw
if gkfreqwave      ==     3   goto ramp
if gkfreqwave      ==     4   goto randip

sine: 
kmodd          =          kmod1
goto amper
square:
kmodd          =          kmod2
goto amper
saw:
kmodd          =          kmod3
goto amper
ramp:
kmodd          =          kmod4
goto amper 
randip: 
kmodd          =          kmod5

amper: 
kmoda1         oscili     kampmodran, kampmodfreq*p4, 100    
kmoda2         oscili     kampmodran, kampmodfreq*p4, 13  
kmoda3         oscili     kampmodran, kampmodfreq*p4, 14  
kmoda4         oscili     kampmodran, kampmodfreq*p4, 15  
kmoda5         randh      kampmodran, kampmodfreq*p4, .7365*p4

kmoda1         port       kmoda1,.0005
kmoda2         port       kmoda2,.0005
kmoda3         port       kmoda3,.0005
kmoda4         port       kmoda4,.0005
kmoda5         port       kmoda5,.0005

if gkampwave     ==     0   goto sinea  
if gkampwave     ==     1      goto squarea 
if gkampwave     ==     2     goto sawa 
if gkampwave      ==     3   goto rampa 
if gkampwave      ==     4   goto randipa 

sinea: 
kmodda         =          kmoda1
goto freqer
squarea:
kmodda         =          kmoda2
goto freqer
sawa:
kmodda         =          kmoda3
goto freqer
rampa:
kmodda         =          kmoda4
goto freqer 
randipa: 
kmodda         =          kmoda5

freqer:
kamp          =          1    
kamp2          =          1 

if (gkmodamp == 0) goto frequency

kamp            =           (kmodda +kampmodran) *.5
if (gkmodampste == 0) goto same
kamp2          =          1-kamp
goto frequency
same:
kamp2          =          kamp

frequency:
kpit           =          1
if (gkmodfreq == 0) goto ok

kpit           =          kmodd
kpit           =          semitone(kmodd+kmodd)

ok:
aOri1    sampler    [snd], 1,kpit*p4

aProc1         =          aOri1 * kamp2  

kmix = gkmix * 0.01

aGauche        =          ((aProc1*kmix)+(aOri1*(1-kmix)))*0.15*gkenv

aGauche         =           aGauche / (ampdb(p5)/10)


               out       aGauche * 0.125

               endin

            instr 2


ktrig       changed     gkpolynum,gkpolyspread
if ktrig = 1 then
            turnoff2    1,0,.5
            reinit      pass
endif
pass:

inum        =           0

generate:
ip4         random      1-i(gkpolyspread), 1+i(gkpolyspread)
ip2         random      i(gkpolyspread), i(gkpolyspread)
            event_i     "i", 1, ip2, p3, ip4

if (inum < i(gkpolynum)) then
inum        =           inum + 1
goto generate
endif
            endin
</Mono>

<Octo>

</Octo>

<Quad>

</Quad>

<Stereo>
gia             ftgen       100, 0, 8193, 10, 1
;gib             ftgen       13, 0, 8193, 10, 1, 0, .33, 0, .2, 0, .143, 0, .111, 0, .09, 0, .077, .066, .059
gib             ftgen       13, 0, 8193, 7, 0, 5, -1, 4081, -1, 10, 1, 4081, 1, 5, 0
;gic             ftgen       14, 0, 8193, 10, 1, .5, .33, .25, .2, .167, .143, .125, .111, .1, .09
gic             ftgen       14, 0, 8193, 7, -1, 5, 1, 8187, -1
gid             ftgen       15, 0, 8193, 7, -1, 5, -1, 8187, 1

                instr 1 

kfreqmodfreq    =           gkfreqmodfreq/60
kfreqmoddepth   =           gkfreqmoddepth
kampmodran      =           gkampmodran
kampmodfreq     =           gkampmodfreq/60

kmod1           oscili      kfreqmoddepth, kfreqmodfreq*p4, 100 
kmod2           oscili      kfreqmoddepth, kfreqmodfreq*p4, 13 
kmod3           oscili      kfreqmoddepth, kfreqmodfreq*p4, 14 
kmod4           oscili      kfreqmoddepth, kfreqmodfreq*p4, 15 
kmod5           randh       kfreqmoddepth, kfreqmodfreq*p4, .365*p4

if gkfreqwave == 0 goto sine
if gkfreqwave == 1 goto square
if gkfreqwave == 2 goto saw
if gkfreqwave == 3 goto ramp
if gkfreqwave == 4 goto randip

sine: 
kmodd           =           kmod1
goto amper
square:
kmodd           =           kmod2
goto amper
saw:
kmodd           =           kmod3
goto amper
ramp:
kmodd           =           kmod4
goto amper 
randip: 
kmodd           =           kmod5

amper: 
kmoda1          oscili      kampmodran, kampmodfreq*p4, 100 
kmoda2          oscili      kampmodran, kampmodfreq*p4, 13 
kmoda3          oscili      kampmodran, kampmodfreq*p4, 14 
kmoda4          oscili      kampmodran, kampmodfreq*p4, 15 
kmoda5          randh       kampmodran, kampmodfreq*p4, .7365*p4

kmoda1          port        kmoda1,.0005
kmoda2          port        kmoda2,.0005
kmoda3          port        kmoda3,.0005
kmoda4          port        kmoda4,.0005
kmoda5          port        kmoda5,.0005

if gkampwave == 0 goto sinea 
if gkampwave == 1 goto squarea 
if gkampwave == 2 goto sawa 
if gkampwave == 3 goto rampa 
if gkampwave == 4 goto randipa 

sinea: 
kmodda          =           kmoda1
goto freqer
squarea:
kmodda          =           kmoda2
goto freqer
sawa:
kmodda          =           kmoda3
goto freqer
rampa:
kmodda          =           kmoda4
goto freqer 
randipa: 
kmodda          =           kmoda5

freqer:
kamp          =           1 
kamp2           =           1 

if (gkmodamp == 0) goto frequency

kamp            =           (kmodda +kampmodran) *.5
if (gkmodampste == 0) goto same
kamp2           =           1-kamp
goto frequency
same:
kamp2           =           kamp

frequency:
kpit            =           1
if (gkmodfreq == 0) goto ok

kpit            =           kmodd
kpit            =           semitone(kmodd+kmodd)

ok:
aOri1,aOri2     sampler     [snd], 1,kpit*p4

aProc1          =           aOri1 * kamp 
aProc2          =           aOri2 * kamp2 

kmix            =           gkmix * 0.01

aGauche         =           ((aProc1*kmix)+(aOri1*(1-kmix)))*0.15*gkenv
aDroite         =           ((aProc2*kmix)+(aOri2*(1-kmix)))*0.15*gkenv


aGauche         =           aGauche / (ampdb(p5)/10)
aDroite         =           aDroite / (ampdb(p5)/10)


                outs        aGauche * 0.125, aDroite * 0.125

                endin


                instr 2


ktrig           changed     gkpolynum,gkpolyspread
if ktrig = 1 then
                turnoff2    1,0,.5
                reinit      pass
endif
pass:

inum            =           0

generate:
ip4             random      1-i(gkpolyspread), 1+i(gkpolyspread)
ip2             random      i(gkpolyspread), i(gkpolyspread)
                event_i     "i", 1, ip2, p3, ip4,i(gkpolynum)

if (inum < i(gkpolynum)) then
inum            =           inum + 1
goto generate
endif
                endin

</Stereo>


<CsoundScore>
;#   p1   p2     p3              p4       

i    2    0.0    [total_time]  
 

</CsoundScore>


<PythonScore>
import random

dd=getUserValue("voi")
ee=getUserValue("startsp")

for i in range(1,getUserValue("no_of_grains")+2):
    forInst(1)
    p2 = random.uniform(0, ee)
    p3 = "[total_time]"
    p4 = random.uniform(1-dd, 1+dd)




</PythonScore>


<CeciliaOpen>
scoreType=Csound

</CeciliaOpen>

<CeciliaData>
</CeciliaData>
